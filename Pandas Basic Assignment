

Q1. You can create a Pandas Series that contains the following data: 4, 8, 15, 16, 23, and 42 using the following code:

```python
import pandas as pd

data = [4, 8, 15, 16, 23, 42]
series = pd.Series(data)

print(series)
```

Output:
```
0     4
1     8
2    15
3    16
4    23
5    42
dtype: int64
```

Q2. You can create a variable of list type containing 10 elements in it and apply pandas.Series function on the variable using the following code:

```python
import pandas as pd

data = [1,2,3,4,5,6,7,8,9,10]
series = pd.Series(data)

print(series)
```

Output:
```
0     1
1     2
2     3
3     4
4     5
5     6
6     7
7     8
8     9
9    10
dtype: int64
```

Q3. You can create a Pandas DataFrame that contains the following data using the following code:

```python
import pandas as pd

data = {'name': ['John', 'Mike', 'Sara'], 'age': [25,30,28], 'gender': ['M', 'M', 'F']}

df = pd.DataFrame(data)

print(df)
```

Output:
```
   name   age gender
0  John   25      M
1  Mike   30      M
2  Sara   28      F
```

Q4. A DataFrame is a two-dimensional table-like data structure with rows and columns. It is different from a Pandas Series which is a one-dimensional labeled array capable of holding any data type. A DataFrame can be thought of as a collection of Series objects that share an index. Here is an example:

```python
import pandas as pd

data = {'name': ['John', 'Mike', 'Sara'], 'age': [25,30,28], 'gender': ['M', 'M', 'F']}

df = pd.DataFrame(data)

print(df['name'])
```

Output:
```
0    John
1    Mike
2    Sara
Name: name, dtype: object
```

Q5. Some common functions you can use to manipulate data in a Pandas DataFrame include `head()`, `tail()`, `describe()`, `groupby()`, and `sort_values()`. For example:

```python
import pandas as pd

data = {'name': ['John', 'Mike', 'Sara'], 'age': [25,30,28], 'gender': ['M', 'M', 'F']}

df = pd.DataFrame(data)

# head() function returns the first n rows of the DataFrame (default is n=5)
print(df.head())

# tail() function returns the last n rows of the DataFrame (default is n=5)
print(df.tail())

# describe() function returns various summary statistics for each column of the DataFrame 
print(df.describe())

# groupby() function groups the DataFrame using a specified column and applies an aggregate function to each group 
print(df.groupby('gender').mean())

# sort_values() function sorts the DataFrame by one or more columns 
print(df.sort_values(by='age'))
```

Q6. A Series and a DataFrame are mutable in nature.

Q7. You can create a DataFrame using multiple Series using the following code:

```python
import pandas as pd

name = pd.Series(['John', 'Mike', 'Sara'])
age = pd.Series([25,30,28])
gender = pd.Series(['M', 'M', 'F'])

df = pd.DataFrame({'name': name,'age': age,'gender': gender})

print(df)
```

Output:
```
   name   age gender
0  John   25      M
1  Mike   30      M
2  Sara   28      F
```
